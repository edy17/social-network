FROM quay.io/quarkus/centos-quarkus-maven:19.2.1 AS builder
COPY src /usr/src/app/src
COPY pom.xml /usr/src/app
RUN mvn -f /usr/src/app/pom.xml clean package

FROM fabric8/java-alpine-openjdk8-jre
ARG AWS_REGION
ARG AWS_ACCESS_KEY_ID
ARG AWS_ACCESS_KEY_SECRET
ARG AWS_IMAGE_BUCKET
ENV AWS_REGION $AWS_REGION
ENV AWS_ACCESS_KEY_ID $AWS_ACCESS_KEY_ID
ENV AWS_ACCESS_KEY_SECRET $AWS_ACCESS_KEY_SECRET
ENV AWS_IMAGE_BUCKET $AWS_IMAGE_BUCKET
ENV JAVA_OPTIONS="-Dquarkus.http.host=0.0.0.0 -Dquarkus.dynamodb.aws.region=${AWS_REGION} \
 -Dquarkus.dynamodb.aws.region=${AWS_REGION} \
 -Dquarkus.dynamodb.aws.credentials.static-provider.access-key-id=${AWS_ACCESS_KEY_ID} \
 -Dquarkus.dynamodb.aws.credentials.static-provider.secret-access-key=${AWS_ACCESS_KEY_SECRET} \
  -Dspatium.image.bucket.name=${AWS_IMAGE_BUCKET}"
ENV AB_ENABLED=jmx_exporter
COPY --from=builder /usr/src/app/target/lib/* /deployments/lib/
COPY --from=builder /usr/src/app/target/*-runner.jar /deployments/app.jar
EXPOSE 8080
ENTRYPOINT [ "/deployments/run-java.sh"]

####
# This Dockerfile.native.build is used in order to build a container that runs the Quarkus application in JVM mode
#
# Before building the docker image run:
#
# mvn package
#
# Then, build the image with:
#
# docker build -f src/main/docker/Dockerfile.native.build.jvm -t quarkus/dynamodb-client-jvm .
#
# Then run the container using:
#
# docker run -i --rm -p 8080:8080 quarkus/dynamodb-client-jvm
#
###
